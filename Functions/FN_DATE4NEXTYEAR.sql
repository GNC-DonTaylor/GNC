------------------------------ 
-- FUNCTION: FN_DATE4NEXTYEAR 
------------------------------ 
-- RETURNS THE EQUIVALENT REPORT DATE FOR NEXT YEAR FROM THE DATE PARAMETER PASSED TO IT 
-- NULL DATE ASSUMES CURRENT DATE USING GETDATE() 
------------------------------ 
-- DON TAYLOR @ 05/08/2020 
------------------------------ 
-- EMBEDDED FN_YEAR2DATE(), FN_DATE2YEAR(), FN_DATE2PERIOD() & FN_DATE2WEEK() LOGIC TO REDUCE FUNCTION DAISY CHAINS @10/14/21-DT 
------------------------------ 
CREATE OR ALTER FUNCTION [DBO].[FN_DATE4NEXTYEAR] 
( @INDATE DATETIME 
) RETURNS DATETIME 
AS 
BEGIN 

--CALCULATIONS: 
--((@WEEKCOUNT - 1) % 4) + 1 AS WEEK, 
--FLOOR((@WEEKCOUNT - 1)/4) + 1 AS PERIOD 

	-- LOCAL PARAMETERS -- 
	DECLARE @RESULT		DATETIME 
	DECLARE @DATE		DATETIME 
	DECLARE @STARTDATE	DATETIME 
	DECLARE @YEAR		INTEGER 
	DECLARE @WEEKCOUNT	INTEGER 
	DECLARE @PERIODS	INTEGER 
	DECLARE @WEEKS		INTEGER 
	DECLARE	@DAYS		INTEGER 
	IF @INDATE IS NULL 
		SET @INDATE = GETDATE() 

	BEGIN 
		/* EMBEDDED CODE SECTION */ 
		--FN_DATE2YEAR() CODE: 
			--GET NEXT YEAR'S STARTDATE BASED UPON THE YEAR OF THE PASSED DATE FIELD: 
			--FN_YEAR2DATE()+1 CODE: WE ARE PASSING NEXT YEAR VALUE, BE AWARE: 
				SET @DATE = '08/01/' + TRIM(STR(YEAR(@INDATE)))				--AUG 1ST DATE OF NEXT YEAR 
				SET @STARTDATE = DATEADD(D, 1-(DATEPART(DW, @DATE)), @DATE)	--START OF WEEK 1 
			-- CHOOSE CURRENT YEAR'S STARTDATE IF THIS DATE IS IN THE FUTURE: 
			IF @STARTDATE > @INDATE 
				BEGIN 
					--GET CURRENT YEAR'S STARTDATE BASED UPON THE YEAR OF THE PASSED DATE FIELD: 
					--FN_YEAR2DATE() CODE: 
						SET @DATE = '08/01/' + TRIM(STR(YEAR(@INDATE)-1))			--AUG 1ST DATE OF CURRENT YEAR 
						SET @STARTDATE = DATEADD(D, 1-(DATEPART(DW, @DATE)), @DATE)	--START OF WEEK 1 
				END 
			--ADD ONE YEAR TO STARTDATE TO GET THE YEAR OF THE ENDDATE: 
			SET @YEAR = YEAR(@STARTDATE)+1 
		--FN_YEAR2DATE()+1 CODE: (WE WANT FIRST DAY OF NEXT YEAR) 
			SET @DATE = '08/01/' + TRIM(STR(@YEAR-1))								--AUG 1ST DATE OF CURRENT YEAR 
			SET @DATE = DATEADD(D, 1-(DATEPART(DW, @DATE)), @DATE)					--START OF WEEK 1 
			SET @STARTDATE = '08/01/' + TRIM(STR(@YEAR))							--AUG 1ST DATE OF NEXT YEAR 
			SET @STARTDATE = DATEADD(D, 1-(DATEPART(DW, @STARTDATE)), @STARTDATE)	--START OF WEEK 1 
		/* EMBED @STARTDATE INTO @WEEKCOUNT TO REDUCE DAISY CHAINED FUNCTIONS*/ 
		----------------------------------------------------------- 
		SET @WEEKCOUNT = (DATEDIFF(D, @DATE, @INDATE) / 7) + 1 
		--SET @WEEKCOUNT = (DATEDIFF(D, DBO.FN_YEAR2DATE(DBO.FN_DATE2YEAR(@INDATE)), @INDATE) / 7) + 1 

		IF @WEEKCOUNT = 53 --FORCE RESULT FROM PERIOD 14/WEEK 1 TO PERIOD 13/WEEK 4 
			BEGIN 
				SET @PERIODS = 13 
				SET @WEEKS = 4	--Changed to week4 because it was wrapping to the next year causing Billing Trends totals to be off. 09-29-22 DT 
				--SET @WEEKS = 5 
			END 
		ELSE --CONVERT WEEKCOUNT TO PERIODS (1-13) AND WEEKS (1-4) 
			BEGIN 
				SET @PERIODS = FLOOR((@WEEKCOUNT - 1)/4) + 1 
				SET @WEEKS = ((@WEEKCOUNT - 1) % 4) + 1 
			END 
		--REMOVE 1 FROM BOTH PERIODS AND WEEKS FOR CALCULATION TO WORK: 
		SET @PERIODS = @PERIODS - 1 
		SET @WEEKS = @WEEKS - 1 
-------------------------------------------------------------- 
-- REPLACED CODE: THIS REDUCES DAISY CHAINING OF FUNCTIONS 
-------------------------------------------------------------- 
--		--GET CURRENT REPORT YEAR 
--		SET @YEAR = DBO.FN_DATE2YEAR(@INDATE) 
--		--FIND 1ST DAY OF NEXT YEAR 
--		SET @STARTDATE = DBO.FN_YEAR2DATE(@YEAR + 1) 
--		--NUMBER OF COMPLETED PERIODS 
--		SET @PERIODS = DBO.FN_DATE2PERIOD(@INDATE) - 1 
--		--NUMBER OF COMPLETED WEEKS 
--		SET @WEEKS = DBO.FN_DATE2WEEK(@INDATE) - 1 
-------------------------------------------------------------- 
		--NUMBER OF COMPLETED DAYS 
		SET @DAYS = DATEPART(DW, @INDATE) - 1 
	
		--SPECIAL EDGE CASE FOR 2010 DATA 
		IF @YEAR = 2010 --FIRST WEEK IS LEFT OFF... 
			SET @WEEKS = @WEEKS - 1 
		-- ....UNLESS IT IS THE LAST WEEK OF 2010 
		IF @INDATE BETWEEN '25-JUL-2010' AND '31-JUL-2010' 
			SET @WEEKS = @WEEKS + 1 
		--IF WE ARE INTO THE 14TH PERIOD OF CURRENT YEAR 
		IF @PERIODS = 13 
			--REMOVE 1 WEEK TO PREVENT WRAPPING 
			SET @WEEKS = @WEEKS - 1 
		--CALCULATE FINAL RESULT 
		SET @RESULT = (@STARTDATE + @PERIODS * 28 + @WEEKS * 7 + @DAYS) 
	END 
	RETURN @RESULT 
END 
