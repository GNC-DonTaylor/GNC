------------------------------
-- FUNCTION: FN_HOLDSTOP_OVERRIDE
------------------------------
-- IF ITEM/LOT RECORD HAS A LOTCODE THAT IS CURRENT YEAR OR EARLIER,
--	RETURN CURRENT YEAR HOLDSTOPCODE
-- OTHERWISE
--	RETURN HOLDSTOPCODE OF THE PASSED RECORD.
------------------------------
-- HOLDSTOPCODE IS LOT.USERDEFINEDCODE_3
-- NULL DATE ASSUMES CURRENT DATE USING GETDATE()
-- Give this function to Stonebridge: Scottie Wilcoxson, Aaron Weast & Frances Galgan
------------------------------
-- DON TAYLOR @ 03/22/2021
------------------------------
CREATE OR ALTER FUNCTION [DBO].[FN_HOLDSTOP_OVERRIDE]
(	@ITMROWID UNIQUEIDENTIFIER,
	@LOTROWID UNIQUEIDENTIFIER
) RETURNS VARCHAR(10)
AS
BEGIN
	DECLARE @SALEYEAR VARCHAR(2)
	DECLARE @LOTCODE VARCHAR(10)
	DECLARE @LOTYEAR VARCHAR(2)
	DECLARE @RESULT VARCHAR(10)

	--GET THE CURRENT SALEYEAR
	SET @SALEYEAR = TRIM(STR(DBO.FN_SALEYEAR(NULL)%100))
	--GET THE LOTCODE FOR THE ITEM/LOT RECORD
	SET @LOTCODE = 
	(	SELECT IMLOT.LOTCODE
		FROM	IMLOT (NOLOCK)
		WHERE	IMLOT.ROWID = @LOTROWID
		AND		IMLOT.R_ITEM = @ITMROWID
	)
	--GET THE LOTYEAR
	SET @LOTYEAR = SUBSTRING(@LOTCODE,1,2)
	--SET THE LOTYEAR THAT IS TO BE RETURNED
	IF @LOTYEAR < @SALEYEAR
		SET @LOTYEAR = @SALEYEAR
	--UPDATE THE LOTCODE WITH THIS LOTYEAR
	SET @LOTCODE = @LOTYEAR+SUBSTRING(@LOTCODE,3,8)
	--GET THE HOLDSTOPCODE FOR THIS LOTCODE
	SET @RESULT =
	(	SELECT USERDEFINEDCODE_3
		FROM	VW_IMLOTVIEW2 VLOT (NOLOCK) 
		WHERE	VLOT.R_ITEM = @ITMROWID
		AND		VLOT.LOTCODE = @LOTCODE
	)
	RETURN @RESULT
END

--TESTING THE LOGIC:
/*
SELECT
ITM.ITEMCODE,
LOT.LOTCODE,
LOT.USERDEFINEDCODE_3 AS HSCODE,
--DBO.FN_HOLDSTOP(ITM.ROWID, LOT.ROWID, NULL) AS FN_HOLDSTOP,
DBO.FN_HOLDSTOP_OVERRIDE(ITM.ROWID, LOT.ROWID) AS FN_HOLDSTOPOVERRIDE
FROM IMITEM ITM
JOIN IMLOT LOT ON LOT.R_ITEM = ITM.ROWID
--WHERE ITM.ITEMCODE = '008319.050.1'--'004065.030.1'
WHERE LOT.USERDEFINEDCODE_3 IS NOT NULL
ORDER BY LOT.LOTCODE, ITM.ITEMCODE
*/
---------------------
---------------------
--OLD OUTDATED CODE--
---------------------
---------------------
--DONOTUSE-DONOTUSE--
--(	@ITMROWID UNIQUEIDENTIFIER,
--	@LOTROWID UNIQUEIDENTIFIER,
--	@INDATE DATETIME
--) RETURNS VARCHAR(10)
--AS
--BEGIN
--	DECLARE @LOTCODE VARCHAR(10)
--	DECLARE @PREVLOTCODE VARCHAR(10)
--	DECLARE @PREVLOTROWID UNIQUEIDENTIFIER
--	DECLARE @NEXTLOTCODE VARCHAR(10)
--	DECLARE @NEXTLOTROWID UNIQUEIDENTIFIER
--	DECLARE @PREVHOLDSTOP VARCHAR(10)
--	DECLARE @HOLDSTOP VARCHAR(10)
--	DECLARE @NEXTHOLDSTOP VARCHAR(10)
--	DECLARE @RESULT VARCHAR(10)

--	IF @INDATE IS NULL
--		SET @INDATE = GETDATE()

--	--GET THE LOTCODE FOR THE ITEM
--	SET @LOTCODE = 
--	(
--		SELECT IMLOT.LOTCODE
--		FROM	IMLOT
--		WHERE	IMLOT.ROWID = @LOTROWID
--		AND		IMLOT.R_ITEM = @ITMROWID
--	)
--	--TRANSFORM THE LOTCODE TO PREVIOUS YEAR LOTCODE
--	SET @PREVLOTCODE = TRIM(STR(SUBSTRING(@LOTCODE,1,2) - 1)) + TRIM(SUBSTRING(@LOTCODE,3,8))

--	--GET POINTER TO PREVIOUS YEAR LOTCODE
--	SET @PREVLOTROWID = 
--	(
--		SELECT PL.ROWID
--		FROM	IMLOT PL
--		WHERE	PL.LOTCODE = @PREVLOTCODE
--		AND		PL.R_ITEM = @ITMROWID
--	)

--	--TRANSFORM THE LOTCODE TO NEXT YEAR LOTCODE
--	SET @NEXTLOTCODE = TRIM(STR(SUBSTRING(@LOTCODE,1,2) + 1)) + TRIM(SUBSTRING(@LOTCODE,3,8))

--	--GET POINTER TO NEXT YEAR LOTCODE
--	SET @NEXTLOTROWID = 
--	(
--		SELECT NL.ROWID
--		FROM	IMLOT NL
--		WHERE	NL.LOTCODE = @NEXTLOTCODE
--		AND		NL.R_ITEM = @ITMROWID
--	)

--	--LOAD HOLDSTOP CODES
--	SET @PREVHOLDSTOP = DBO.FN_HOLDSTOP(@ITMROWID, @PREVLOTROWID, @INDATE)
--	SET @HOLDSTOP = DBO.FN_HOLDSTOP(@ITMROWID, @LOTROWID, @INDATE)
--	SET @NEXTHOLDSTOP = DBO.FN_HOLDSTOP(@ITMROWID, @NEXTLOTROWID, @INDATE)

--	--BREAK CHAIN OVERRIDE CONDITION WHERE NEXT YEAR HOLDSTOP IS 'H'; DON'T OVERRIDE
--	--IF @NEXTHOLDSTOP = 'H'
--	--	RETURN @HOLDSTOP
	
--	--IF @LOTROWID IS NOT NULL 
--	--	SET @RESULT =	
--	--	(
--	--		IIF((@PREVLOTROWID IS NOT NULL AND @PREVHOLDSTOP IS NULL AND @HOLDSTOP = 'H')
--	--			, NULL, @HOLDSTOP)
--	--	)
--	IF @LOTROWID IS NOT NULL 
--		SET @RESULT =	
--		(
--			IIF((@PREVLOTROWID IS NOT NULL AND @PREVHOLDSTOP IS NOT NULL)
--				, @HOLDSTOP, NULL)
--		)
--	RETURN @RESULT
--END
